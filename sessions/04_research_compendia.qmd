---
title: "Research compenia as R packages"
subtitle: "2023-07-20"
callout-appearance: default
execute: 
  eval: false
---

### Description

A research compendium is a collection of all the digital parts of your research project (data, code, documents) which is often required to be published alongside a scientific paper. 
The structure and tools of R packages provide a standard workflow for building such reproducible research compendia. In this lecture, you will learn how to build, test and publish your research compendia in the form of an R package. This lecture is mainly aimed at people that have some experience with R, R-Studio and Git. But even if you are new to these topics, you will still get a valuable overview of key concepts for reproducible research compendia and tools to build them.


```{=html}
<iframe class="slide-deck" width="780" height="500" src="../slides/2023_07_20_research_compendia.html"></iframe>
```

[Slides in full screen](../slides/2023_07_20_research_compendia.html){target="_blank"} &nbsp;&nbsp;&nbsp; <a href="../slides/2023_07_20_research_compendia.pdf" download>Download PDF slides</a>

# How to build your own research compendium - Step by step

If you find any issues or problems in this how-to, feel free to let me know [via email](mailto:selina.baldauf@fu-berlin.de)
or [create an issue on Github](https://github.com/selinaZitrone/tools_and_tips/issues/new/choose). 
Thanks :pray:

## Preparation

Before you start with the how-to, please check that you have the following things set up and running:

#### R packages needed

First, you need to install some packages. Some of them are essential for the core 
workflow, others are optional for some more advanced features that are described
later in the how-to.

You can run the following code to install the packages that you still need:

```{r}
packages_essential <- c("devtools", "usethis")

install.packages(setdiff(packages_essential, rownames(installed.packages())))

packages_optional <- c("goodpractice", "testthat")

install.packages(setdiff(packages_essential, rownames(installed.packages())))
``` 

#### Set up Git and Github

You only need this if you want to use version control with your research compendium,publish on Github and use Github actions to do some
automated testing of your package. If not, you can skip this step and all the steps in the following guide that involve Git and Github.

To set everything up, first

- Download and install [git](https://git-scm.com/downloads) on your machine
- Create a [GitHub Account](https://github.com/join)

Now, you can add a personal access token (PAT) to your `.Renviron` file. This way you
can be identified to your Github account when you are trying to communicate with
Github from R (we will do this later in the how-to).

To set up you PAT call:

```{r}
usethis::create_github_token()
```

This will open Github in the browser (you might need to enter your password.)

In the page that opens, enter a note on what you want to use the token for (e.g. RStudio on my Work computer).
Then select an appropriate expiration date (90 days is fine in most cases, but Github will also 
send you an email when the token is about to expire so you can renew it).

Scroll over the scopes, select 'repo', 'user', 'workflow' (usually this is already
the default setting) and then click on 'Generate token' on the bottom.

Leave the page open, and already copy the token to your clipboard. Open R Studio again.
You can now add this token to your `.Renviron` file (don't do this if you share your
computer with other people or they can access your Github account) by calling:

```{r}
gitcreds::gitcreds_set()
```

Follow the prompt and enter your PAT. Now you should be able to work with Github.

## Step 1: Create an empty R-package

Think of a name for you R package that respects the following rules:

- only ASCII letters, numbers and '.'
- at least two characters
- starts with a letter
- does not end with '.'

In this example, I chose `temperatureBerlin` because my example package contains
some temperature analysis.

Create a package by running `usethis::create_package("path/to/package/temperatureBerlin")`{.R}. 
If you leave all the other function parameters at their default value, this command will create a new directory, initialize an R package in that directory
and open your package project in a new RStudio window.

Have a look at your files window to see which files were already added.

## Step 2: Initialize a Git repository

To initialize a Git repository for you package call

```{r}
usethis::use_git()
```

Follow the promts in the console, commit your first files with the commit
message 'Initial commt' and restart R Studio.

### During package development

Checkout the options that you have in the `Build` tab in RStudio. You can do everything described below either via the R Studio GUI or by calling the repective R functions.

During the entire package building process the `devtools` package is your friend and you can (and should)

- frequently check your package by clicking the `Check` button or by calling `devtools::check()`{.R} (Keyboard shortcut Ctrl/Cmd + Shift + E)
- test your functions after running `devtools::load_all()`{.R} 
  + this simulates installing and loading the package
  + much better than testing your functions in your current environment
- build the documentation with `devtools::document()`{.R} (Ctrl/Cmd + Shift + D)
  + you have to do this once in the beginning, afterwards `devtools::check()`{.R} will also build the documentation for you
- install and load the package and restart R with Ctrl/Cmd + Shift + B

You can already try this out now, because your project is already an (empty) R package.

## Step 3: Create a research compendium

### Fill out the DESCRIPTION  file

The `DESCRIPTION` file contains important metadata about your package and describes which other packages it needs to run correctly. If an R project contains a `DESCRIPTION` file, RStudio and devtools will consider it an R package.

There are a few conventions on how to fill out the fields of the `DESCRIPTION` file. Have a look at the  [R packages book](https://r-pkgs.org/description.html) to find out more about this. 

For now, just look at how `usethis` already created a template for you. Fill out the dummy fields of the description file, e.g.

```
Package: temperatureBerlin
Type: Package
Title: Analyse Temperature Data From Berlin
Authors@R: 
    person(given = "Selina",
           family = "Baldauf",
           role = c("aut", "cre"),
           email = "selina.baldauf@fu-berlin.de")
Description: Analysis of the temperature data collected in Berlin from our
    research project xyz presented in paper abc.
License: `use_mit_license()`, `use_gpl3_license()` or friends to
    pick a license
Encoding: UTF-8
LazyData: true
Roxygen: list(markdown = TRUE)
RoxygenNote: 7.2.3
```

### Add a license

Use one of the functions from the `usethis` package to add a license, e.g. for the GNU General Public License 3 (gpl-3) license you can use

```r
usethis::use_gpl3_license()
```
This adds LICENSE.md with your name (or the name(s) specified in the DESCRIPTION file) in it to the project and automatically updates the license field in `DESCRIPTION`.

### Add data

A common place for datasets that you want to make available in your research compendium is the `/data` folder. The convention of R packages is that you should only store binary `.RData` files in there. Everything that is not in `.RData` format (e.g. csv files) can go in the `/data-raw` folder.

#### Create a dataset with R

R packages have the convention that only datasets in `.Rdata` format can be in the `data/` 
folder. Everything else goes into the `data-raw/` folder.

So, we first create a `/data-raw` folder by calling `usethis::use_data_raw("temperature")`{.R}. This will also create a `temperature` file in which you can create your data and then add it to the `/data` folder as an `.RData` file. Of course you can chose a more meaningful name for your
data.

In this R script, you can either create a fake data set using only R code, or you can read a csv file of your data, that you put into the `/data-raw` folder before.

At the end of the script, you call the `usethis::use_data()`{.R} function to compress
your data file and store it as and `.RData` file in your package.

By default these files are compressed using `bzip2` but you can also chose other compression methods by changing the `compress` parameter of the function.

So, you can just put something like the following in `temperature.R` file and run the script:

```r
# create a dummy dataset for temperature measurements
temperature <- data.frame(id = 1:10, temp=rnorm(10, mean = 15, sd = 2))
# or alternatively, if you have temperature data as csv in data-raw
temperature <- readr::read_csv("data-raw/temperature.csv")

# compress and store the data as .Rdata file
usethis::use_data(temperature, overwrite = TRUE)
```

Now have a look at the `data/` folder in your project, where you will find
an `temperature.Rdata` version of the data.

### Add an analysis function

All R functions you need for your analysis go in the `R/` folder. You can group related functions together in the same script but unrelated functions should go in separate scripts.

Here, we create a simple function that prints the mean of a vector. We save this function in a new R-Script called printMean.R. To create this script, you can conveniently run

```{r}
usethis::use_r("printMean")
```

This will will create, save and open the script for you. 

Now sdd the following simple function:

```r
# a simple printer function for the mean of a vector
printMean <- function(x){
  print(paste0("The mean value is ", mean(x, na.rm = T), "!"))
}
```

### Document function and data with `roxygen2`

You can document your functions and data using the package [`roxygen2`](https://roxygen2.r-lib.org/articles/roxygen2.html). This allows you to describe your functions in the same place where you define them. Roxygen2 will automatically generate `.Rd` files in the `/man` folder, update the `NAMESPACE` if you import or export functions and update the `DESCRIPTION` file if you include any functions from other packages.

The basic workflow is:

- insert a roxygen skeleton above your function 
  + either use the RStudio GUI `Code | Insert Roxygen Skeleton` or the keyboard shortcut `Ctrl + Alt + Shift + R` (on Windows)
- call `devtools::document()`{.R} or use Ctrl/Cmd + Shift + D to generate the documentation in the `/man` folder and update the `NAMESPACE`

To create a documentation for our simple `printMean` function, navigate to the respective R script and add a roxygen skeleton.

Now you can fill out the skeleton by adding all the information about the function that you want to appear in the help file for that function using tags. E.g. your roxygen description could look like the following:

```{r eval=F}
#' @title Print mean values in a sentence
#' @description This function calculates the mean of its input and prints it into a sentence. The function
#' is called in the analysis.Rmd file
#' @export
#' @param x A vector of numeric values of which to calculate the mean
#' 
#' @return The output of \code{\link{print}} after calculating the \code{\link{mean}} and pasting it
#' into a sentence
#'
#' @examples
#' printMean(c(1,2,3))
#'
```

To document datasets in your compendium open up a new R script with the same name as your dataset in the `/R` directory (in our case `temperature.R`) (remember `usethis::use_r("temperature")`{.R}?) and describe your data set before specifying the name of your dataset as a string. As a bare minimum this could look like the following:

```{r eval = F}
#' @title Temperature data from place X
#' @description Temperature measurements (2m height) measured on March 21st, 2009 at place x
#' @format A \code{data.frame} with 2 columns, which are:
#' \describe{
#' \item{id}{id of the sensor}
#' \item{temp}{temperature in °C}
#'}
"temperature"
```

Unfortunately, for data sets you can't insert a preset roxygen skeleton. 

:::{callout-tip}

If you are too lazy to document your dataset by hand, you can use the [`sinew`](https://yonicd.github.io/sinew/index.html) package which is very convenient with package documentation using `roxygen2`. Install the package with

```{r}
# install.packages("remotes")
remotes::install_github('yonicd/sinew')
```

and then run

```{r}
sinew::makeOxygen(obj = temperature)
```

This will print you a perfect, pre-made skeleton for the data to the console, and you can
just copy paste it to your `temperature.R` file and then fill out.

:::

If you now run `devtools::document()`{.R} or rebuild your package, you will find an automatically generated read only file `printMean.Rd` and `temperature.Rd` in the `/man` folder of your research compendium. If you now call `?printMean`{.R} or `?dummyTempData`{.R} (after installing and restarting) you open the help file just like with any other R function you know. 

Please also have a look at the [conventions and guidelines](https://r-pkgs.org/man.html#roxygen-comments) on roxygen2-documentation and the quick reference of the [most common tags](https://stuff.mit.edu/afs/athena/software/r/current/RStudio/resources/roxygen_help.html).

### Add an analysis script

We will now add an analysis script in the form of a Quarto document (This could
also be an R Script instead). Here
we write some analysis using the data and functions that we just defined.

Add an `/analysis` folder with an quarto document `report.qmd` to your compendium.
This can for example look like this:

````
---
title: "Temperature Analyis"
author: "Selina Baldauf"
date: "`r format(Sys.time(), '%d %B, %Y')`"
---

`r ''````{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
devtools::load_all(".")
`r ''````

# This is the temperature analysis

`r ''````{r}
printMean(dummyTempData$temp)
`r ''````
````

With the `devtools::load_all(".")` command, we tell the document to first load
all functions included in the package before running the code chunks

## Step 4: Version control with Git and GitHub

### Commit all changes

It's time to commit all the changes to our package.
There are many options how to do this. If you already use Git, use your personal
favorite. 

One option is to look for the `Git` pane (next to `Build`) in R Studio, then stage all created files (by selecting them in the checkbox) and then to click commit. You are asked to enter
a commit message and then you can click on Commit to actually make the commit.

Alternatively, you could do this in the terminal:

```sh
git add .
git commit -m "First package version"
```

### Make the compendium a GitHub repository

For this, you can conveniently use the `usethis` package:

```r
usethis::use_github()
```
Follow the promtpts in the console and this will initialize a new GitHub repository from your compendium and add the url to `DESCRIPTION`. 

If you do this for the first time it is possible that you run into some issues because you might not have set up everything correctly, yet. But the `usethis` package will help you through all the steps with its error messages.
One thing you definitely need for this step to work is a [PAT (personal acces token)](https://happygitwithr.com/github-pat.html#github-pat) for GitHub added to your .Renviron file. Check if you have one or create one with `usethis::browse_github_token()`{.R}.
You can find a description of how to get one in the beginning of this how-to.

## Step 5: Add a readme to your github project

Add a README.md to your package that will be rendered on the webpage of your GitHub repository.

```r
usethis::use_readme_md()
```
In there, you can describe your package and add some information on how to download it and how to get started with the package.
Now you have to commit and push your changes to Github for them to be effective. You can use the same commit strategy as described above for R Studio. Then you can click on the green push button to publish your changes to Github.

Now your package is published to Github and can be downloaded and installed by others :tada:

## Extras

### How to include large external data sets with `piggyback`

If you use an R package as a research compendium, you might also want to share large datasets along with it. The problem is, that you cannot manage those large files anymore by tracking them with git and commiting directly to GitHub.
However, GitHub allows you to attach up to 2 GB of files to each release of your project. The [`piggyback`](https://docs.ropensci.org/piggyback/articles/intro.html) package takes advantage of this and allows you to create GitHub releases, upload and download large datasets associated with your compendium.

First, we simulate a large datafile by creating a dataset in our `data-raw` folder (if you have really large file you would not save them as .txt but rather compress them first).

```r
largeDataSet <- data.frame(id = 1:1e6, temp = rnorm(1e6,15,2))
write.table(largeDataSet, "data-raw/largeDataSet.txt")
```

To use the `piggyback` package, you first need to install it on your machine with `install.packages("piggyback")`{.R}.
To upload our dataset, we first need to create a new release on GitHub. The first release has to be created on GitHub, by clicking on `Create a new release`, giving it a Tag (e.g. v0.0.1) and a title. You will see that the release contains your source code as zip and as a tarball (.tar.gz).

With piggyback you can always list your existing releases by running

```r
piggyback::pb_list()
```

You can also create a new release directly from R by calling

```r
piggyback:pb_new_release("v0.0.2")
```

To track your dataset (which means that everytime the dataset changes you can create a new release), call

```r
piggyback::pb_track("data-raw/largeDataSet.txt")
```

To piggyback your dataset to your package, you now simply have to run

```r
piggyback::pb_upload("data-raw/largeDataSet.txt")
```
Now you can find it attached to your latest release.

If you want to use the large dataset in your package for the analysis or to generate the report, you can write a function to download the data using `piggyback::pb_download`{.R}. Just create a new file `loadData.R` in your `/R` directory and add the following function.

```r
loadData <- function(){
  piggyback::pb_download(repo = "selinaZitrone/YoMos2020")
}
```

If this function is called, it will automatically download all the assets attached to the latest release of the repository and put them in a `/data-raw` folder. Now the data can be accessed by all the package functions. Have a look at `?piggyback::pb_download`{.R} to see which parameters you can specify. You don't have to download all the assets and you can also chose which version of the release should be used for the download.

You can also create new releases directly from `piggyback` and you can track large datasets by creating new releases if the datasets change. This will not be covered here, but if you are interested have a look at the [piggyback documentation](https://docs.ropensci.org/piggyback/articles/intro.html).

## Step 4: Unit testing

First, create the infrastructure needed by the `thestthat` package.

```r
usethis::use_testthat()
```

This creates a `/tests` folder which contains a `/testthat` folder and an R-script called `testthat.R`. You do not need to change anything in the testthat.R script. This is called e.g. by `rcmdcheck::rcmdcheck()`{.R} to run all the tests you created in your package. The `/testthat` folder is the place to store the R-scripts with the actual tests. 
Also, the `testthat` package ist now added to the Suggests field in `DESCRIPTION`.

Now you can add a test script that tests your simple printer function. To create a test script for a specific function, open the R-script with the function and then initialize a basic test file for the script by calling

```r
usethis::use_test()
```
The testfile can be found in `/tests/testthat`. Testfiles have to be named test-xyz.R in order to be found (`usethis::use_test()`{.R} does the naming for you - so you don't have to worry about it).

We can write a very simple test function for our printMean function that checks if it works correctly

```r
test_that("printer function works", {
  expect_equal(printMean(c(1,2,3)), "The mean value is 2!")
})
```
If you run the test and you don't get any errors in the console, then it means that your test was successful. If not you will get a helpful error message telling you what went wrong. 

If you want to run all the tests from your package at once to see if they pass your can run

```r
devtools::test()
```
## Step 5: CI with GitHub Actions

Before we start, it's time to commit all the changes to our package. Use the `Git` panel or run

```sh
git add .
git commit -m "Add unit tests for printMean function"
```

Then create the basic file structure needed to set up a workflow by calling

```r
usethis::use_github_actions()
```

This creates a `.github` folder, in which you find a `.gitignore` file and a `/workflows` folder. In this folder you can store all your GitHub actions in `.yaml` file format. The `usethis::use_github_actions()`{.R} function automatically added a first GitHub action called `R-CMD-check.yaml`. This action is triggered on every push or pull request on the master branch and checks your package to make sure that new code does not break the package. 

If you want to add other actions that already are available (e.g. from the GitHub repository [r-lib/actions](https://github.com/r-lib/actions)) you can do the following:

```r
usethis::use_github_action("render-readme.yaml")
```
This adds the respective yaml-file to `./github/workflows`.
Of course you can also write your own actions and simply add them to the /workflows folder.

## Add RStudio server with `holepunch`

There is a nice intro for holepunch: [Getting started with holepunch](https://karthik.github.io/holepunch/articles/getting_started.html).
The code below is copied'n'pasted from the [holepunch repo's readme](https://github.com/karthik/holepunch).

```r
remotes::install_github("karthik/holepunch")

write_dockerfile(maintainer = "your_name") 
# To write a Dockerfile. It will automatically pick the date of the last 
# modified file, match it to that version of R and add it here. You can 
# override this by passing r_date to some arbitrary date
# (but one for which a R version exists).

generate_badge() # This generates a badge for your readme.

# ----------------------------------------------
# At this time 🙌 push the code to GitHub 🙌
# ----------------------------------------------

# And click on the badge or use the function below to get the build 
# ready ahead of time.
build_binder()
# 🤞🚀
```

[*Be carful here: Since October 2020, GitHub has renamed its default branch for repositories from master to main. If you have a repository with main instead of master as default branch, holepunch will throw an error when trying to connect Binder to your GitHub repository. If this happens make sure that your replace `master` with `main` in the `.binder/Dockerfile` URL and in the URL used in the Readme badge*]

# Some more tips

- You can use `devtools::spell_check()`{.R} to test your entire package for spelling errors. This is very useful if you have reports or other text intensive files in there. By default, the spell check will be for American English. However, you can change the langauage by adding a `Language` field to your `DESCRIPTION` file.

- If you want to write a new function and generate the corresponding R script in the `/R` directory, you can conveniently call `usethis::use_r("functionName")`{.R}. This will create a file `functionName.R` ind the `/R` directory and open it for you. 

- Use the [`goodpractice`](https://github.com/MangoTheCat/goodpractice) package to further test your package for parts which can be improved. Running `goodpractice::gp()`.{R} will tell you where your comment lines are too long, where you should consider renaming variables, if something is wrong with your `NAMESPACE`, ...

## Links and further reading

#### *The Turing Way* a very useful guide to reproducible data science
https://the-turing-way.netlify.app/introduction/introduction.html

#### Ropensci's reproducibility guide 
https://ropensci.github.io/reproducibility-guide/

### Reasearch compendia

#### *A guide to making your data analysis more reproducible* (nice talk and more by Karthik Ram)
https://github.com/karthik/rstudio2019

#### *The Turing Way* guide's section on reseach compendia 
https://the-turing-way.netlify.app/research_compendia/research_compendia.html

#### Ressources collection on research compendia
https://research-compendium.science/

### R packages

#### Comprehensive book on how to create an R package
https://r-pkgs.org/

## Git and GitHub

#### How to use git and github with R and R-Studio
https://happygitwithr.com/

#### Howto use Git branching
https://nvie.com/posts/a-successful-git-branching-model/
https://guides.github.com/introduction/flow/

### Github actions
https://help.github.com/en/actions/building-and-testing-code-with-continuous-integration/about-continuous-integration
https://www.youtube.com/watch?v=F3wZTDmHCFA

#### CI with github actions

* Jim Hester on [GitHub Actions with R](https://rstudio.com/resources/rstudioconf-2020/azure-pipelines-and-github-actions/)
* [Getting started](https://help.github.com/en/actions/getting-started-with-github-actions) with GitHub Actions
* [Examples](https://github.com/r-lib/actions) for Actions with R

#### How to use an .Rmd document as Readme in github and render it automatically

https://www.r-bloggers.com/rendering-your-readme-with-github-actions/
https://www.edwardthomson.com/blog/github_actions_advent_calendar.html

### Unit testing

* [Intro to unit testing in R](https://katherinemwood.github.io/post/testthat/)
* Testing with [<code>testthat</code>](http://r-pkgs.had.co.nz/tests.html)

### Holepunch package for R and Binder (adds a live, on-demand RStudio server to your R project on GitHub/GitLab)
https://karthik.github.io/holepunch/

## Introduction to Docker for R
https://colinfay.me/docker-r-reproducibility/


### Scientific publications
James, Justin. 2012. “10 Classic Mistakes That Plague Software Development Projects.” 2012. https://www.techrepublic.com/blog/10-things/10-classic-mistakes-that-plague-software-development-projects/.

Scheller, Robert M, Brian R Sturtevant, Eric J Gustafson, Brendan C Ward, and David J Mladenoff. 2010. “Increasing the Reliability of Ecological Models Using Modern Software Engineering Techniques.” Frontiers in Ecology and the Environment 8 (5): 253–60. https://doi.org/10.1890/080141.

Baxter, Susan M., Steven W. Day, Jacquelyn S. Fetrow, and Stephanie J. Reisinger. 2006. “Scientific Software Development Is Not an Oxymoron.” PLoS Computational Biology 2 (9): 0975–78. https://doi.org/10.1371/journal.pcbi.0020087.

Merali, Zeeya. 2010. “Computational Science: ...Error.” Nature 467 (7317): 775–77. https://doi.org/10.1038/467775a.

Passig, Kathrin, and Johannes Jander. 2013. Weniger Schlecht Programmieren. O’Reilly.

Storer, Tim. 2017. “Bridging the Chasm: A Survey of Software Engineering Practice in Scientific Programming.” ACM Computing Surveys 50 (4). https://doi.org/10.1145/3084225.

Marwick, Ben, Carl Boettiger, and Lincoln Mullen. 2018. “Packaging Data Analytical Work Reproducibly Using R (and Friends).” American Statistician 72 (1): 80–88. https://doi.org/10.1080/00031305.2017.1375986.

