---
title: "Introduction to version control with Git"
subtitle: "Scientific workflows: Tools and Tips :hammer_and_wrench:"
date: "2023-06-15"
format: 
  revealjs:
    footer: "Version control with Git"
    highlight-style: printing
    mainfont: Cabinet Grotesk
    slide-number: true
    show-slide-number: all
    incremental: true
    code-line-numbers: false
    theme: slides.scss
    auto-stretch: false
editor: source
execute: 
  echo: false
  eval: true
from: markdown+emoji
---

## What is this lecture series?

### Scientific workflows: Tools and Tips :hammer_and_wrench:

:::{.nonincremental}

:date: Every 3rd Thursday :clock4: 4-5 p.m. :round_pushpin: Webex

-   One topic from the world of scientific workflows
-   For topic suggestions [send me an email](mailto:selina.baldauf@fu-berlin.de)
-   If you don't want to miss a lecture
    -   Check out the [lecture website](https://www.bcp.fu-berlin.de/en/graduiertenzentrum/promovierende/veranstaltungen/workshops/lecture-SB/index.html)
    -   [Subscribe to the mailing list](https://lists.fu-berlin.de/listinfo/toolsAndTips)
-   Slides provided [on Github](https://selinazitrone.github.io/tools_and_tips/)

:::

##

![By Jorge Cham from [PhD Comics](https://phdcomics.com/comics/archive.php?comicid=1531)](images/2023_06_15_git/final-doc_comic.jpg){fig-align="center"}


## Version control

:::{.columns}

:::{.column width="50%"}

![](images/2023_06_15_git/final-doc_comic.jpg)
:::

:::{.column width="50%"}

### Requirements

- **Complete and long-term history** of every file in your project

- **Safe** (e.g. no accidental loss of versions)

- **Easy** to use

- **Overview and documentation** of all changes

- **Collaboration** should be possible

:::

:::

# Version control with Git

![](images/2023_06_15_git/Git-Logo-2Color.png){width=10%}

## Version control with Git

- Open source and free to use version control software

- Quasi standard for software development
  - Optimized for text files (e.g. code, ...)

- A whole universe of other software and services around it

. . .

#### Today

- Basic concepts of Git
- A simple workflow in theory and practice
- A small outlook on more advanced features


<!-- ## Version control with Git -->

<!-- - For projects with mainly text files (e.g. code, markdown files, ...) -->

<!-- . . . -->

<!-- ![](images/2023_06_15_git/git_snapshots_a.png) -->

<!-- ## Version control with Git -->

<!-- :::{.nonincremental} -->

<!-- - For projects with mainly text files (e.g. code, markdown files, ...) -->

<!-- - Basic idea: Take snapshots of your project over time -->

<!-- ::: -->

<!-- ![](images/2023_06_15_git/git_snapshots_b.png) -->

## Version control with Git

- For projects with mainly text files (e.g. code, markdown files, ...)

- Basic idea: Take snapshots of your project over time
  - Git registers the changes that you make to your projec

- Information on the snapshots is stored in a special `.git` folder inside your project
  - The `.git` folder contains the **Git repository**
  

![](images/2023_06_15_git/git_snapshots_c.png)

## Version control with Git

Git is a **distributed version control system**

. . .

:::{.columns}

:::{.column width="50%"}

![](images/2023_06_15_git/distributed_git.png)

:::

:::{.column width="50%"}

- Idea: many local repositories synced via one remote repo
- Every computer has full-fledged version of repository with entire history

:::

:::

## How to use Git

After you [installed it --- ADD LINK]() there are different ways to use the 
software for you projects

## How to use Git - Terminal

Using Git from the terminal

![](images/2023_06_15_git/git-init.png)

- All Git commands start with `git` and are followed by the command, e.g. `git init`<br>

. . . 

:::{.columns}

:::{.column width="50%"}

`r fontawesome::fa(name = "plus", fill = "green")` Gives you most control<br>

`r fontawesome::fa(name = "plus", fill = "green")` You find a lot of help online <br>

:::

:::{.column width="50%"}

`r fontawesome::fa(name = "minus", fill = "red")` You need to use the terminal <br>

:::

:::

## How to use Git - GUIs

A Git GUI is integrated in most (all?) IDEs, e.g. R Studio

. . .

![](images/2023_06_15_git/rstudio-git.png){fig-align="center" width=50%}


:::{.columns}

:::{.column width="50%"}

`r fontawesome::fa(name = "plus", fill = "green")` (Often) Easy and intuitive <br>

`r fontawesome::fa(name = "plus", fill = "green")` Stay inside your IDE<br>

:::

:::{.column width="50%"}

`r fontawesome::fa(name = "minus", fill = "red")` Not universal <br>

:::

:::

## How to use Git - GUIs
  
Standalone Git GUI software, e.g. Github Desktop

![](images/2023_06_15_git/github-desktop.png){width=50% fig-align="center"}

:::{.columns}

:::{.column width="50%"}

`r fontawesome::fa(name = "plus", fill = "green")` Easy and intuitive <br>

`r fontawesome::fa(name = "plus", fill = "green")` Helps with initial setup of Git <br>

`r fontawesome::fa(name = "plus", fill = "green")` Nice integration with Github <br>

:::

:::{.column width="50%"}

`r fontawesome::fa(name = "minus", fill = "red")` Switch program to use Git <br>

:::

:::

## How to use Git

#### Which one to choose?

- Depends on your prior experience and taste
- Depends on your IDE
- If you never used Git before, I recommend to start with Github Desktop
  - But in the long run, it's definitely worth it looking a bit into the terminal
- You can also mix methods and freely switch between them

. . .

Have a look at the [Website - ADD LINKs]() to find small tutorials for 3 different options using Git.

# The basic Git workflow

> `git init`, `git add`, `git commit`, `git push`

## Starting situation

- Local working directory (i.e. a folder) with or without files

<!-- ![](images/2023_06_15_git/git-start-concept.png) -->


## Step 1: Initialize a git repository

- Add a (hidden) `.git` folder to your project that contains your git repository
- You don't have to touch anything that is in this folder

. . .

![](images/2023_06_15_git/git-init-concept.png){fig-align="center" width=60%}

## Step 2: Modify files and stage changes

Git detects any changes in the working directory

. . .

![Add file Bob.txt to working directory](images/2023_06_15_git/git-add-concept-1.png)

. . .

Git shows you all the changes you did to the files.

## Step 2: Modify files and stage changes

When you want a file to be part of the next commit (i.e. snapshot), you have to stage the file


- In the terminal use `git add`
- Usually in Git GUIs this is just a check mark next to the file name

. . .

![](images/2023_06_15_git/git-add-concept-2.png)

## Step 3: Commit changes

- Commits are the snapshots of your project states

- Commit work from staging area to local repository
  - Collect meaningful chunks of work in the staging area, then commit

. . .

![](images/2023_06_15_git/git-commit-concept.png)

. . .

- After a commit, your changes are part of your project's git history

## Commit messages

- Every commit has a unique identifier (so-called hash)
  - You can use this hash to come back to the version
- Every commit has a commit message
- Good commit messages are essential to make good use of git!

<!-- :::{.center} -->

<!-- ![](https://imgs.xkcd.com/comics/git_commit.png) -->

<!-- ::: -->
. . .

A good commit message has a *subject line* and a *body*, e.g.
<br>
```markdown
Add function to calculate temperature

This is the body where you can explain in detail which changes you did
and why you did them. Then your colleages (and you from the future) immediately
understand why.
```
::: {.aside}

Read [here](https://cbea.ms/git-commit/) for a nice and detailed explanation on 
good commit messages how to write them.

:::

## Step 4: Create and connect a remote repo

- Remote repositories are on a server and can be used to *synchronize*, *share* and *collaborate*

- Remote repositories can be private (only for you and selected collaborators) or
public (visible to anyone online)

. . .


![](images/2023_06_15_git/git-remote-concept.png){fig-align="center" width=60%}

## Step 5: Share your changes with the remote repo

- Push your local changes to the remote with `git push`

. . .

![](images/2023_06_15_git/git-push.png){fig-align="center" width=60%}

## Summary

- `git init`: Initialize a git repository
  - adds a `.git` folder to your working directory
- `git add`: Add files to the staging area
  - This marks the files as being part of the next commit
- `git commit`: Take a snapshot of your current project version
  - Includes a timestamp, a meaningful commit message and information on the person who did the commit
- `git push`: Push your newest commits to the remote repository
  - Sync your local project version with the remote e.g. on Github
  
# Share and collaborate

> Between machines and/or people

## Clone a repo from a remote

![](images/2023_06_15_git/distributed_git.png){fig-align="center" width=40%}

- Get a copy of your own repository on a different machine
- Get the repository from somebody else

## Clone a repo from a remote

By cloning, you get a full copy of the repository and the working directory with all files on your machine.

- Clone a remote repository with `git clone <remote_address>`

. . .

![](images/2023_06_15_git/git-clone-concept.png){width=50%}

- If the clone is authorized it can also commit and push

## Get changes from the remote

- Local changes, publish to remote: `git push`

- Remote changes, pull to local: `git pull`

. . .

![](images/2023_06_15_git/git-pull-concept.png){width=60%}

## A simple collaboration workflow

- One branch with commits of multiple people

## A more complex collaboration workflow

- Branching and merging

OR PUT THIS IN THE OUTLOOK?????


## Remote repository platforms

The combination of Git and a remote repository platform unlocks a lot of possibilities!

- Advanced workflow features for collaboration and open-source development
  - Issues and pull requests
- Publishing and sharing of projects
  - Easily connect with Zenodo to get a DOI
  - Accepted by many journals
- Additional features 
  - Project wikis
  - Project websites

## Take home

- Git (+ Github) is very powerful for coding projects
  - Keep track of your changes and go back if you need to
  - Collaborate and share
  - Have fun
- Can be confusing in the beginning, but Git GUIs make it intuitive
- Valuable addition to your toolbox that's also relevant outside academia

. . .

::: {.callout-tip}
## Tips for getting started
Start using it for small projects and discover features as you go along.

Don't get frustrated by the complexity - it will get better.

Use a GUI if you don't like the terminal.
:::

## Next lecture

. . .

#### Research compendia with R

A research compendium is a **collection of all the digital parts of your research projects** (data, code, documents) with the goal of your results being reproducible. You can do this in R by building an R 📦 which makes it easy to publish a fully reproducible version of your project.

<br>

. . .

:date: 20th July :clock4: 1-2 p.m. :round_pushpin: Webex

:bell: [Subscribe to the mailing list](https://lists.fu-berlin.de/listinfo/toolsAndTips)

:e-mail: For topic suggestions and/or feedback [send me an email](mailto:selina.baldauf@fu-berlin.de)

## Thank you for your attention :)
Questions?


## References

:::{.nonincremental}

[Learn git concepts, not commands](https://dev.to/unseenwizzard/learn-git-concepts-not-commands-4gjc): Blogpost that explains really well the concepts of git, also more advanced ones like `rebase` or `cherry-pick`.

[How to write good commit messages](https://cbea.ms/git-commit/): Blogpost that explains why good commit messages are important and gives 7 rules for writing them.

[Git cheat sheet](https://education.github.com/git-cheat-sheet-education.pdf): Always handy if you don't remember the basic commands

[Book on how to use Git wih R](https://happygitwithr.com/)

:::

## How to ignore files/folders?

- **Step 1: **  Create a file with the name `.gitignore` in working directory

--

- **Step 2: ** Add all files and directories you want to ignore to the `.gitignore` file

## Ignoring files: Example

```
*.html    # ignore all .html files
*.exe     # ignore all .exe files

debug.log # ignore the file debug.log

build/    # ignore all files in subdirectory build
```

See [here](https://www.atlassian.com/git/tutorials/saving-changes/gitignore) for more ignore patterns that you can use.

# Branches

## Branches in Git

<br>

![](images/2023_06_15_git/branching/git-commit-line.png)

. . .

<br>
- All repositories start with a default branch (main/master)


- As long as you work on one branch and just make changes in working directory, 
stage and commit them, you don't really care about branches


## Multiple branches

- Work on different versions of the same project in parallel

- This allows you to
  - Experiment on a branch without messing up the main version
  - Collaborate with others in a smooth way

## Merging branches again

- You can bring changes from one branch into another one by merging them back togehter

## Collaboration

- Can be done on a single branch:

## More elaborate collaboration

Typical workflow in software development:

- Work on your own branch, then when you are ready, do a pull request
- Others can then first review what you did and then they can accept your changes










