---
title: "Introduction to the tidyverse"
subtitle: "Scientific workflows: Tools and Tips 🛠️"
author: "Dr. Selina Baldauf"
date: "2024-01-18"
format: 
  revealjs:
    footer: "Selina Baldauf // Tidyverse"
    highlight-style: printing
    mainfont: Cabinet Grotesk
    slide-number: true
    show-slide-number: all
    incremental: true
    self-contained: true
    code-line-numbers: false
    theme: slides.scss
    auto-stretch: false
editor: source
execute: 
  echo: true
  eval: true
  cache: true
  message: false
knitr: 
  opts_chunk: 
    collapse: true
    comment: "#>" 
from: markdown+emoji
---

## What is this lecture series?

### Scientific workflows: Tools and Tips :hammer_and_wrench:

::: nonincremental
:date: Every 3rd Thursday :clock4: 4-5 p.m. :round_pushpin: Webex

-   One topic from the world of scientific workflows
-   Material provided [online](https://selinazitrone.github.io/tools_and_tips/)
-   If you don't want to miss a lecture
    -   [Subscribe to the mailing list](https://lists.fu-berlin.de/listinfo/toolsAndTips)
:::

## What is the tidyverse?


![](images/2024_02_15_tidyverse/tidyverse.png){.top-right width="8%"}


> The tidyverse is an opinionated **collection of R packages** designed for data science. All packages **share** an underlying **design philosophy, grammar, and data structures**.  
[[www.tidyverse.org](https://www.tidyverse.org/)]{.text-small}

. . .

:::{.columns}

:::{.column width="40%"}

:::{.r-stack}

**Tidyverse core packages**

:::

:::

:::{.column width="60%"}

![](images/2024_02_15_tidyverse/core_packages2.png){width="90%"}

:::

:::

## Why the tidyverse?

![](images/2024_02_15_tidyverse/tidyverse.png){.top-right width="8%"}

Basic idea: Make data analysis **intuitive**, **efficient** and **readable**.

This facilitates

- learning
- collaboration
- reproducible research

. . .

Also, the tidyverse is **actively developed** and has a **large community**.

## Which tidyverse packages do you use?

Head over to the menti poll


![](images/2024_02_15_tidyverse/core_packages2.png){width="70%"}

## Today

![](images/2024_02_15_tidyverse/tidyverse.png){.top-right width="8%"}

Overview of 

- most important **packages and functions**
- underlying **principles** of the tidyverse
- how the tidyverse packages work together in a **data analysis workflow**

. . .

I can't show you everything. But the tidyverse has an **[excellent documentation](https://www.tidyverse.org/)** and **[cheatsheets](https://posit.co/resources/cheatsheets/)**.

## Getting the tidyverse

Install all tidyverse packages with 

```r
install.packages("tidyverse")
```

. . .

Load all core tidyverse packages with 

```{r}
#| message: true
library(tidyverse)
```

. . .

You can also load packages individually - But don't do both!

. . .

Non-core packages need to be loaded individually, e.g.

```r
library(readxl)
```

## Data analysis with the tidyverse

::: {.r-stack}
![](images/2024_02_15_tidyverse/workflow-1-import.png){.fragment}

![](images/2024_02_15_tidyverse/workflow-2-tidy.png){.fragment}

![](images/2024_02_15_tidyverse/workflow-3-transform.png){.fragment}

![](images/2024_02_15_tidyverse/workflow-4-visualize.png){.fragment}

![](images/2024_02_15_tidyverse/workflow-5-model.png){.fragment}

![](images/2024_02_15_tidyverse/workflow-6-tibble.png){.fragment}

![](images/2024_02_15_tidyverse/workflow-8-functional.png){.fragment}
:::

:::{.aside}

Image adapted from Wickham & Grolemund: [R for Data Science](https://r4ds.had.co.nz/introduction.html)

:::

## Tibbles: The overarching data structure

![](images/2024_02_15_tidyverse/tibble.png){.top-right width="8%"}

Tibbles are 

> a **modern reimagining of the data frame**. Tibbles are designed to be (as much as possible) **drop-in replacements** for data frames.
<br>[(Wickham, [Advanced R](https://adv-r.hadley.nz/vectors-chap.html#tibble))]{.text-small}

- Tibbles have the same basic properties as data frames

- Everything that you can do with data frames, you can do with tibbles

- Main advantage: Tibbles print much nicer to the console

. . .

Have a look at [this book chapter](https://adv-r.hadley.nz/vectors-chap.html#tibble) for a full list of the differences between data frames and tibbles and the advantages of using tibbles.

## Tibbles: The overarching data structure

![](images/2024_02_15_tidyverse/tibble.png){.top-right width="8%"}

- Tidyverse functions return tibbles automatically
- Create with `tibble` function (equivalent to `data.frame`)

. . .

:::{.columns}

:::{.column width="50%"}

**Creating a tibble**

```{r}
tibble(
  x = 1:26,
  y = letters,
  z = factor(LETTERS)
)
```

:::

:::{.column width="50%"}

**Creating a data frame**

```{r}
data.frame(
  x = 1:26,
  y = letters,
  z = factor(LETTERS)
)
```

:::

:::

## Import data with readr

![](images/2024_02_15_tidyverse/readr.png){.top-right width="8%"}

The most important functions are:

- `read_csv` to read **comma delimited** files
- `read_tsv` to read **tab delimited** files
- `read_delim` to read files with **any delimiter**

. . .

All `read_*` functions return a `tibble`.

## Import data with readr

![](images/2024_02_15_tidyverse/readr.png){.top-right width="8%"}

Example:  Read csv with temperature data from two arctic weather stations Foolik & Poolik [(Data modified from [`lterdatasampler`](https://lter.github.io/lterdatasampler/articles/arc_weather_vignette.html))]{.text-small}

```{r}
#| label: prepare-data
#| include: false
arc_weather <- lterdatasampler::arc_weather
# Cut the table to make less computationally demanding
arc_weather <- arc_weather[1:365, ] |> select(-daily_precip, -mean_windspeed)
arc_weather <- mutate(arc_weather, station = "Foolik")
arc_weather_poolik <- arc_weather |> mutate(station = "Poolik")
# add 1 °C and some random noise to arc_weather polik
arc_weather_poolik <- arc_weather_poolik |> 
  mutate(mean_airtemp = mean_airtemp + 3 + rnorm(n = nrow(arc_weather_poolik), mean = 0, sd = 0.5))

arc_weather <- bind_rows(arc_weather, arc_weather_poolik)

arc_weather <- arc_weather |> pivot_wider(names_from = station, values_from = c(mean_airtemp))

names(arc_weather) <- c("Date", "FoolikMeanTemp°C", "PoolikMeanTemp°C")
```

```{r}
#| label: readr-example
#| eval: false
arc_weather <- read_csv(file = "data/arc_weather.csv")
arc_weather
```

. . .

```{r}
#| label: show-arc-weather
#| echo: false
arc_weather
```

. . .

::: {.callout-tip}
## Use readr functions with `janitor::clean_names`

Get consistent and good-practice use column names. [Package documentation](https://sfirke.github.io/janitor/articles/janitor.html) {{< fa arrow-up-right-from-square >}} 

:::

## Import data with readr

![](images/2024_02_15_tidyverse/readr.png){.top-right width="8%"}

Example: Read csv with temperature data from two arctic weather stations Foolik & Poolik [(Data modified from [`lterdatasampler`](https://lter.github.io/lterdatasampler/articles/arc_weather_vignette.html))]{.text-small}

```{r}
#| label: janitor-example
#| eval: false
arc_weather <- read_csv(file = "data/arc_weather.csv")
arc_weather <- janitor::clean_names(arc_weather)
arc_weather
```

```{r}
#| label: show-janitor
#| echo: false
arc_weather <- janitor::clean_names(arc_weather)
arc_weather
```

::: {.callout-tip}
## Use readr functions with `janitor::clean_names`

Get consistent and good-practice use column names. [Package documentation](https://sfirke.github.io/janitor/articles/janitor.html) {{< fa arrow-up-right-from-square >}} 

:::

## Import data with readr

![](images/2024_02_15_tidyverse/readr.png){.top-right width="8%"}

- Advantages of readr functions
  - Faster than `read.table`/`read.csv`
  - Better defaults than base (e.g. guessing of data types)
  - Return tibbles

- Tidyverse packages for other data types:
  - `readxl` for Excel files
  - `haven` for SPSS, SAS, and Stata files
  - `rvest` for web scraping
  - ...

## Tidy data with tidyr

![](images/2024_02_15_tidyverse/tidyr.png){.top-right width="8%"}

## What is tidy data?

![Illustration from the [Openscapes](https://www.openscapes.org/) blog [*Tidy Data for reproducibility, efficiency, and collaboration*](https://www.openscapes.org/blog/2020/10/12/tidy-data/) by Julia Lowndes and Allison Horst](images/2024_02_15_tidyverse/tidydata_1.jpg){width=85%}

## What is tidy data?

Let's look at some examples

:::{.columns}

:::{.column width="40%"}

**Tidy**
```{r echo=FALSE}
data.frame(id = 1:6,
  name = c("floof", "max", "cat", "donut", "merlin", "panda"),
  color = c("gray", "black", "orange", "gray", "black", "calico")) |>
  knitr::kable()
```

:::

:::{.column width="60%"}

:::{.fragment}

**Non-tidy**
```{r echo=FALSE}
data.frame(floof = "gray",
  max = "black",
  cat = "orange",
  donut = "gray",
  merlin = "black",
  panda = "calico") |>
  knitr::kable()
```  

<br>
```{r echo=FALSE}
data.frame(gray = c("floof", "donut"),
  black = c("max", "merlin"),
  orange = c("cat", ""),
  calico = c("panda", "")) |>
  knitr::kable()
```  

:::

:::

:::

. . .

Sometimes ***raw data*** is non-tidy because its structure is optimized for data entry or viewing rather than analysis.

## Why tidy data?

The main advantages of **tidy** data is that the `tidyverse` packages are built to work with it.

![Illustration from the [Openscapes](https://www.openscapes.org/) blog [*Tidy Data for reproducibility, efficiency, and collaboration*](https://www.openscapes.org/blog/2020/10/12/tidy-data/) by Julia Lowndes and Allison Horst](images/2024_02_15_tidyverse/tidydata_3.jpg){width=70%}

## Tidy data

Let's look at some examples

:::{.columns}

:::{.column width="40%"}

**Tidy**
```{r echo=FALSE}
data.frame(id = 1:6,
  name = c("floof", "max", "cat", "donut", "merlin", "panda"),
  color = c("gray", "black", "orange", "gray", "black", "calico")) |>
  knitr::kable()
```

:::

:::{.column width="60%"}

:::{.fragment}

**Non-tidy**
```{r echo=FALSE}
data.frame(floof = "gray",
  max = "black",
  cat = "orange",
  donut = "gray",
  merlin = "black",
  panda = "calico") |>
  knitr::kable()
```  

<br>

```{r echo=FALSE}
data.frame(gray = c("floof", "donut"),
  black = c("max", "merlin"),
  orange = c("cat", ""),
  calico = c("panda", "")) |>
  knitr::kable()
```  

:::

:::

:::

. . .

<br>

Sometimes ***raw data*** is non-tidy because its structure is optimized for data entry or viewing rather than analysis.

## Why tidy data?

The main advantages of **tidy** data is that the `tidyverse` packages are built to work with it.


![Illustration from the [Openscapes](https://www.openscapes.org/) blog [*Tidy Data for reproducibility, efficiency, and collaboration*](https://www.openscapes.org/blog/2020/10/12/tidy-data/) by Julia Lowndes and Allison Horst](images/2024_02_15_tidyverse/tidydata_3.jpg){width=70%}

## Tidy data with tidyr

![](images/2024_02_15_tidyverse/tidyr.png){.top-right width="8%"}

- Tidying means reorganizing the data
  - Values do not change
- Most important functionality:
  - **Pivoting**: `pivot_longer` and `pivot_wider`
  - **Splitting** and **combining** columns: `separate_wider_delim/position/regex` and `unite`
  - Handle **missing values**: `drop_na`, `replace_na`, `complete`

## Tidy data with tidyr

![](images/2024_02_15_tidyverse/tidyr.png){.top-right width="8%"}

What is not tidy about our weather data?

```{r}
#| label: tidyr-example
arc_weather
```

- Each row has multiple observations
- Variables are split across multiple columns

## Tidy data with tidyr

![](images/2024_02_15_tidyverse/tidyr.png){.top-right width="8%"}

This can be solved with `pivot_longer`

```{r}
pivot_longer(arc_weather, 
             cols = c(foolik_mean_temp_c, poolik_mean_temp_c))
```
## Tidy data with tidyr

![](images/2024_02_15_tidyverse/tidyr.png){.top-right width="8%"}

Or if you directly want nicer column names:

```{r}
arc_weather <- pivot_longer(arc_weather, 
             cols = c(foolik_mean_temp_c, poolik_mean_temp_c),
             names_to = "station",
             values_to = "mean_temp_c")
arc_weather
```

## Data transformation with dplyr

![](images/2024_02_15_tidyverse/dplyr.png){.top-right width="8%"}

- Data cleaning, adding new columns, summarizing, ...

- Depending on the data type in combination with
  - `stringr` for character columns
  - `lubridate` for date-time columns
  - `forcats` for factor columns

## Data transformation with dplyr

![](images/2024_02_15_tidyverse/dplyr.png){.top-right width="8%"}

Basic vocabulary for data cleaning/filtering

:::{.columns}

:::{.column width="50%"}

`select()` picks variables (columns) based on their names

```{r}
select(arc_weather, date, mean_temp_c)
```


:::

:::{.column width="50%"}

`filter()` picks observations (rows) based on their values

```{r}
filter(arc_weather, station == "foolik_mean_temp_c")
```


:::

:::

## Data transformation with dplyr

![](images/2024_02_15_tidyverse/dplyr.png){.top-right width="8%"}

Use filter in combination with

:::{.columns}

:::{.column width="50%"}

`lubridate` to filter by month

```{r}
# Filter only data points from May
filter(arc_weather, month(date) == 5)
```


:::

:::{.column width="50%"}

`stringr` to filter by string

```{r}
# Filter only rows where the station variable contains the word "foolik"
filter(arc_weather, str_detect(station, "foolik"))
```


:::

:::

## Data transformation with dplyr

![](images/2024_02_15_tidyverse/dplyr.png){.top-right width="8%"}

Changing values and adding columns with `mutate`

```{r}
# Add column with temperature in K
mutate(arc_weather, mean_temp_k = mean_temp_c + 274.15)
```


## Data transformation with dplyr

![](images/2024_02_15_tidyverse/dplyr.png){.top-right width="8%"}

Changing values and adding columns with `mutate`

```{r}
# Remove _mean_temp_c from station
arc_weather <- mutate(arc_weather, station = str_remove(station, "_mean_temp_c"))
arc_weather
```

## Data transformation with dplyr

![](images/2024_02_15_tidyverse/dplyr.png){.top-right width="8%"}

Summarizing data with `summarize`

- will **collapse the data** to a **single row**

. . .

```{r}
summarize(arc_weather, 
          overall_mean = mean(mean_temp_c, na.rm = TRUE))
```
## Data transformation with dplyr

![](images/2024_02_15_tidyverse/dplyr.png){.top-right width="8%"}

Summarizing data with `summarize` and `group_by` or `.by`

- will **collapse the data** to a **single row per group**

```{r}
summarize(arc_weather, 
          overall_mean = mean(mean_temp_c, na.rm = TRUE),
          .by = station)
```

## The pipe ` |> ` {.inverse}

> Combine multiple data operations into one command

## The pipe `|>`

Data transformation often requires **multiple operations** in sequence.

The pipe operator `|>` helps to keep these operations clear and readable.

- You may also see `%>%` from the `magrittr` package
- Turn on the native R pipe ` |> ` in **Tools -> Global Options -> Code**

:::{.fragment}

![](images/2024_02_15_tidyverse/native-pipe.png){width=50%}

:::

:::{.aside}

See [here](https://www.tidyverse.org/blog/2023/04/base-vs-magrittr-pipe/) for differences 
between the two pipe versions

:::

## The pipe `|>`

Let's look at an example without pipe:

```{r}
#| eval: false
# 1: read in the data
arc_weather <- read_csv(file = "data/arc_weather.csv")
# 2. clean column names
arc_weather <- janitor::clean_names(arc_weather)
# 3. Bring data in the right format
arc_weather <- pivot_longer(arc_weather, 
                            cols = c(foolik_mean_temp_c, poolik_mean_temp_c),
                            names_to = "station",
                            values_to = "mean_temp_c")
# 4. Clean station column
arc_weather <- mutate(arc_weather, station = str_remove(station, "_mean_temp_c"))
```

## The pipe `|>`

The pipe operator makes it very easy to combine multiple operations:

```{r}
#| eval: false
arc_weather <- read_csv(file = "data/arc_weather.csv") |>
  janitor::clean_names() |>
  pivot_longer(cols = c(foolik_mean_temp_c, poolik_mean_temp_c),
                names_to = "station",
                values_to = "mean_temp_c") |>
  mutate(station = str_remove(station, "_mean_temp_c"))
```

. . .

You can read from top to bottom and interpret the `|>` as an "and then do".

## The pipe `|>`

But what is happening?

The pipe is "pushing" the result of one line into the first argument of the function from the next line.

. . .

```{r eval=FALSE}
arc_weather |> 
  filter(month(date) == 5)

# instead of 
filter(arc_weather, month(date) == 5)
```

. . .

Piping works perfectly with the `tidyverse` functions because they are designed
to return a tibble **and** take a tibble as first argument.

. . .

:::{.callout-tip}
Use the keyboard shortcut ` Ctrl/Cmd + Shift + M ` to insert ` |> `
:::

## Visualize data with ggplot2

![](images/2024_02_15_tidyverse/ggplot2.png){.top-right width="8%"}

![Artwork by [Allison Horst](https://twitter.com/allison_horst)](images/2024_02_15_tidyverse/ggplot2_exploratory.png){width=60%}

## Visualize data with ggplot2

![](images/2024_02_15_tidyverse/ggplot2.png){.top-right width="8%"}

Add a collage of basic plot types

## Visualize data with ggplot2

![](images/2024_02_15_tidyverse/ggplot2.png){.top-right width="8%"}

![Artwork by [Allison Horst](https://twitter.com/allison_horst)](images/2024_02_15_tidyverse/ggplot2_masterpiece.png){width=60%}

## Visualize data with ggplot2

![](images/2024_02_15_tidyverse/ggplot2.png){.top-right width="8%"}

Add some data art with ggplot

## Visualize data with ggplot2

![](images/2024_02_15_tidyverse/ggplot2.png){.top-right width="8%"}

- Whole universe build around ggplot
  - Find a list of ggplot extensions [here](https://exts.ggplot2.tidyverse.org)

## Visualize data with ggplot2

![](images/2024_02_15_tidyverse/ggplot2.png){.top-right width="8%"}

Piping also works well together with `ggplot`

```{r}
#| echo: false
theme_set(theme_bw(base_size = 16))
```

```{r}
#| output-location: column
arc_weather |>
  filter(month(date) == 5) |>
  ggplot(aes(x = date, y = mean_temp_c, color = station)) +
  geom_point() +
  geom_smooth(se = FALSE) +
  labs(title = "Mean temperature in May",
       x = "Date",
       y = "Mean temperature (°C)",
       color = "Station") +
  scale_color_viridis_d() +
  theme(legend.position = "bottom")
```

## Purrr for functional programming

![](images/2024_02_15_tidyverse/purrr.png){.top-right width="8%"}

- Apply functions to multiple elements of a list/vector/...
- Useful to replace e.g. for loops/apply-functions
  - Often purrr functions are more intuitive
  - See [here](https://purrr.tidyverse.org/articles/base.html) for a full comparison
  between base R functions and purr functions
- Most important function: `map`
  - comes in different versions, depending on the input and the desired output
  
## Purrr for functional programming

![](images/2024_02_15_tidyverse/purrr.png){.top-right width="8%"}

```{r}
tibble(
  Output = c("List", "List", "Vector of desired type", "Vector of desired type", "Data frame", "Data frame"),
  Input = c("1 Vector", "2 Vectors", "1 Vector", "2 Vectors", "1 Vector", "2 Vectors"),
  `Purr function` = c("map", "map2", "map_lgl", "map2_lgl", "map_df", "map2_df")
) |>
  knitr::kable()

```

## Purrr for functional programming

![](images/2024_02_15_tidyverse/purrr.png){.top-right width="8%"}

```{r}
# Draw a random number from a normal distribution:
rnorm(mean = 0, sd = 1, n = 1)

# Draw 5 random numbers for mean 1:4
means <- 1:4
samples <- map(means, rnorm, n = 5, sd = 1)
str(samples)
```

. . .

This can also be combined with the pipe:

```{r}
means |>
  map(rnorm, n = 5, sd = 1) |>
  str()
```


## Purrr for functional programming

![](images/2024_02_15_tidyverse/purrr.png){.top-right width="8%"}

Purrr functions are also nice for data analysis, for example if you have 
multiple files with the same structure.

```{r}
#| eval: false
# Step 1: List all files in your data directory
paths <- list.files("data")
```
```{r}
#| echo: false
# Step 1: List all files in your data directory
paths <- list.files("slides/data", pattern = "oolik")
paths
paths <- list.files("slides/data", pattern = "oolik", full.names = TRUE)
```

. . .

```{r}
# Step 2: Read all files into a list of tibbles
arc_weather_files <- paths |>
  map(read_csv)
arc_weather_files
```
## Purrr for functional programming

![](images/2024_02_15_tidyverse/purrr.png){.top-right width="8%"}

Purrr functions are also nice for data analysis, for example if you have 
multiple files with the same structure.

```{r}
# Step 3: Apply a linear model to each station file,
# get the model summary of each model and extract the coefficients

arc_weather_files |>
  map(\(x) lm(mean_temp_c ~ date, data = x)) |>
  map(summary) |>
  map_dbl("r.squared")
```

## Summary

![](images/2024_02_15_tidyverse/workflow-complete.png)

## Summary

Tidyverse allows for **efficient**, **readable** and **intuitive** data analysis.

Here a comparison of base R and tidyverse code:

:::{.columns}

:::{.column width="50%"}

**Tidyverse**

```{r}
#| eval: false
arc_weather <- read_csv(file = "data/arc_weather.csv") |>
  janitor::clean_names() |>
  pivot_longer(cols = c(foolik_mean_temp_c, poolik_mean_temp_c),
                names_to = "station",
                values_to = "mean_temp_c") |>
  mutate(station = str_remove(station, "_mean_temp_c"))
```


:::

:::{.column width="50%"}

**Base R**

```{r}
#| eval: false
# Read the CSV file
arc_weather <- read.csv(file = "data/arc_weather.csv", stringsAsFactors = FALSE)

# Clean column names using janitor::clean_names()
arc_weather <- janitor::clean_names(rc_weather)

# Reshape the data from wide to long format
arc_weather <- reshape(rc_weather,
                           varying = c("foolik_mean_temp_c", "poolik_mean_temp_c"),
                           v.names = "mean_temp_c",
                           times = c("foolik", "poolik"),
                           timevar = "station",
                           direction = "long")

# Remove the "_mean_temp_c" from the station names
arc_weather$station <- gsub("_mean_temp_c", "", arc_weather$station)
```

::: 
:::

:::

## Summary

Tidyverse allows for **efficient**, **readable** and **intuitive** data analysis.

Here a comparison of base R and tidyverse code:

:::{.columns}

:::{.column width="50%"}

**Tidyverse**

```{r}
#| eval: false
arc_weather |>
  filter(month(date) == 5) |>
  ggplot(aes(x = date, y = mean_temp_c, color = station)) +
  geom_point() +
  geom_smooth(se = FALSE) +
  labs(title = "Mean temperature in May",
       x = "Date",
       y = "Mean temperature (°C)",
       color = "Station") +
  scale_color_viridis_d() +
  theme(legend.position = "bottom")
```


:::

:::{.column width="50%"}

**Base R**

```{r}
#| eval: false
# Filter the data
arc_weather_may <- arc_weather[format(arc_weather$date, "%m") == "05", ]

# Create a plot
plot(arc_weather_may$date, arc_weather_may$mean_temp_c, 
col = arc_weather_may$station,
     main = "Mean temperature in May",
     xlab = "Date",
     ylab = "Mean temperature (°C)")

# Add a legend
legend("bottom", legend = unique(arc_weather_may$station), 
fill = unique(arc_weather_may$station))
```

::: 
:::

:::

## Summary

Benefits of using the tidyverse:

- Unified ecosystem
- User-friendly syntax
- Efficient
- Active community and resources
- Universe around tidyverse

. . .

This leads to:

- Reproducibility
- Readability
- Collaboration
  
## Next lecture

Semester break in March!

#### Topic t.b.a.

<br>

:date: 18th April :clock4: 4-5 p.m. :round_pushpin: Webex

:bell: [Subscribe to the mailing list](https://lists.fu-berlin.de/listinfo/toolsAndTips)

:e-mail: For topic suggestions and/or feedback [send me an email](mailto:selina.baldauf@fu-berlin.de)

## Thank you for your attention :)
Questions?<br><br><br><br>

## References

- [Tidyverse website](https://www.tidyverse.org/): find links to all package documentations
- [Cheatsheets](https://posit.co/resources/cheatsheets/)
- [R for Data Science](https://r4ds.had.co.nz/introduction.html) book: Learn data analysis with the tidyverse